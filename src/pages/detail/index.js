import React, { Component } from 'react'
import {
    MainWrapper,
    HeaderWrapper,
    TitleDisplay,
    TimeDisplay,
    ContainerWrapper,
    Container,
    Content
} from './style'
import './gitment.0.0.3.min.css'
import ParticlesContainer from '../../common/particles'
import { connect } from 'react-redux'

const innerHTML2 = "<p style=\"height: 550px;\"><iframe id=\"gba-frame\" src=\"https://phillipfeiding.github.io/gbajs/\" style=\"height: 550px; width: 100%; border: 0;\" scrolling=\"no\"></iframe></p><p><span style=\"font-style: italic; font-weight: bold;\">* <span style=\"color: rgb(194, 79, 74);\">Note: in case of failure to load the game, simply reload the page.</span></span></p><p><span style=\"font-style: italic; font-weight: bold;\">**&nbsp;tribute to and powered by&nbsp;<a href=\"https://github.com/endrift/gbajs/\" target=\"_blank\">GBA.js</a></span><br></p><p><br></p><h1>Background</h1><p><span style=\"font-size: large;\">This is a simplified implementation of the classical game PACMAN! In the case if you are not familiar with Pacman, the game basically makes the player control the Pacman to navigate through a maze filled with food dots. The goal is to eat through all food dots without being caught by a ghost. The ghosts moves as fast as your Pacman and are really smart to figure out where you are, so keep far away from them, and most importantly, don't get stuck in the corner. : ) If you are caught by a ghost, you lose the game and must restart a new game of the current level to play. If you eat all dots, you win and can play next level! (You will restart if you finish all levels) If you eat a big food dot, the ghosts become scared so that you can go ahead and eat them to avoid future disturbance. Don't rely too much on this power and be as quick as possible since such condition only lasts for a short period.</span></p><p><span style=\"font-size: large;\">In possible future implementations, I am considering adding more levels to the game to make it more fun and challenging!</span></p><p><span style=\"font-size: large;\"><br></span></p><h1>Instructions</h1><p><span style=\"font-size: x-large; font-weight: bold;\">i. Start Screen</span><br><span style=\"font-size: large;\">Press <span style=\"color: rgb(194, 79, 74); font-weight: bold;\">Start</span> button (ENTER on your keyboard for emulators), and you will enter the main game.</span></p><p><br><span style=\"font-size: x-large; font-weight: bold;\">ii. Main Game</span><br><span style=\"font-size: large;\">Here on the left you should see a maze layout filled with food dots, your Pacman, and some ghosts. You can control your Pacman using the <span style=\"font-weight: bold; color: rgb(194, 79, 74);\">arrow keys</span> on your keyboard to navigate through the maze. If you hit the wall, the Pacman will try to go in that direction but gets stuck there eventually.</span></p><p><span style=\"font-size: large;\">You can exit the game at any time, just hit the <span style=\"font-weight: bold; color: rgb(194, 79, 74);\">Select</span> button and this should reset the game state and redirect you to the Start Screen. If you get caught by a ghost, you lose and will be redirected to the Lose Screen.</span></p><p><span style=\"font-size: large;\">You can enable cheat mode by hitting <span style=\"color: rgb(194, 79, 74); font-weight: bold;\">A</span> (Z) button, which will allow you to pass through a ghost peacefully without being eaten. This only means to make the game easier and explore its full functionality.</span></p><p><span style=\"font-size: large;\">If you win the game by eating all dots. Congratulations, you are redirected to the Win Screen.</span></p><p><br><span style=\"font-size: x-large; font-weight: bold;\">iii. Lose Screen</span><br><span style=\"font-size: large;\">Hit <span style=\"color: rgb(194, 79, 74); font-weight: bold;\">Start</span> to resume</span></p><p><span style=\"font-size: large;\">Hit <span style=\"color: rgb(194, 79, 74); font-weight: bold;\">Select</span> to go back to Start Screen</span></p><p><br><span style=\"font-size: x-large; font-weight: bold;\">iv. Win Screen</span><br><span style=\"font-size: large;\">Hit <span style=\"font-weight: bold; color: rgb(194, 79, 74);\">Start</span> to go to next level</span></p><p><span style=\"font-size: large;\">Hit <span style=\"color: rgb(194, 79, 74); font-weight: bold;\">Select</span> to go back to Start Screen</span></p><p><br></p><h1>How I Made This</h1><p><span style=\"font-size: large;\">I know C is mostly a procedural programming language, but somehow, I figured out to use function pointers to create methods associated with structs, and thus simulating early form of objects, which gives the code an object-oriented taste. However, I just used the simplest features of OO like encapsulation, and never managed to do fancy things like inheritance or polymorphism, which also aren't particularly useful for this small program. However, in this style I could separate my control, model, and view logic into different modules, and hopefully make the project easier to maintain and debug.</span></p><p><span style=\"font-size: large;\">Particularly about the rendering logic, the maze is dynamically painted to the screen by padding tiny pictures (8 x 8 pixels). There are hundreds of images including all tiles, Pacmans, ghosts, and string characters as resources in the image folder, and a particular module takes care of putting the right ones on the canvas. As the game proceeds while ghosts and Pacman changes location, the canvas object takes advantage of partial rendering instead of drawing out the full screen, and thus letting the game flow smoothly.</span><br></p><p style=\"text-align: center;\"><span style=\"font-size: x-large; font-weight: bold;\">State Machine Transition Diagram</span></p><p style=\"text-align: center;\"><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/gba-pacman/state-machine.png?raw=true\" style=\"max-width:100%;\"><span style=\"font-size: x-large; font-weight: bold;\"><br></span></p><p><span style=\"font-size: large;\"><br></span></p><h1>Repository Link</h1><p style=\"text-align: center;\"><a href=\"https://github.com/PhillipFeiDing/pacman-game-gba\" target=\"_blank\" style=\"font-size: large;\">Link to GitHub</a>&nbsp;<br></p><script>\n    fetch('https://cors-anywhere.herokuapp.com/https://github.com/PhillipFeiDing/pacman-game-gba/blob/master/Game.gba?raw=true')\n  .then(res => res.blob()) // Gets the response and returns it as a blob\n  .then(blob => {\n    document.getElementById(\"gba-frame\").contentWindow.run(blob)\n});\n</script>\n"

const innerHTML19 = "<h2><span style=\"font-weight: 700; color: rgb(194, 79, 74);\">Problem 239</span></h2><h3><span style=\"color: rgb(77, 128, 191);\"><span style=\"font-weight: bold;\"></span>Keyword: Max, Sliding Window, Deque</span></h3><h3><span style=\"color: rgb(77, 128, 191);\">Description:</span></h3><p>Given an array&nbsp;<em>nums</em>, there is a sliding window of size&nbsp;<em>k</em>&nbsp;which is moving from the very left of the array to the very right. You can only see the&nbsp;<em>k</em>&nbsp;numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.</p><p><strong>Follow up:</strong><br>Could you solve it in linear time?</p><p><strong>Example:</strong></p><pre><strong>Input:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, and <em>k</em> = 3\n<strong>Output: </strong><code>[3,3,5,5,6,7] \n<strong>Explanation: \n</strong></code>\nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\n 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong></pre><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4&nbsp;&lt;= nums[i]&nbsp;&lt;= 10^4</code></li><li><code>1 &lt;= k&nbsp;&lt;= nums.length</code></li></ul><h3><span style=\"color: rgb(77, 128, 191);\">Solution:</span></h3><p>Maintain a deque recording the array indices of the useful elements in the current sliding window. An element is useful when it is greater than all elements to its left in the sliding window. The indices in the deque are ordered such that their corresponding elements in the array are sorted from the greatest to the smallest. Particularly, the head of the deque records the index of the greatest element in the sliding window. Also, the relative positioning of the element in the array is preserved in the deque as well.</p><p>In each iteration, as we initially expand or continuous move the sliding window, each time a new element is added into the back of the deck in the following way: it finds its position by \"knocking out\" elements from the back of the deque until it meets an element which is larger than itself or until the deque is empty. In this way, Elements that just became useless because of this added element are dropped out, and the order property of the deque is preserved. Then, we will check the front of the deque to ensure the current largest element is still present in the sliding window. This is particularly easy because we store indices of elements instead of elements themselves; therefore, we will possibly remove the old maximum which just \"aged out\" from the front of the dequeue to keep our recording most up-to-date, and the next maximum may emerge.</p><p>At the end of each iteration, after the deque has been updated, we simply peek the front of the deque to retrieve the current maximum.</p><h3><span style=\"color: rgb(77, 128, 191);\">Code:</span></h3><pre><code>class Solution {<br>    public int[] maxSlidingWindow(int[] nums, int k) {<br>        int[] result = new int[nums.length - k + 1];<br>        Deque&lt;Integer&gt; sortedIdx = new LinkedList&lt;&gt;();<br>        for (int i = 0; i &lt; nums.length; i++) {<br>            while (!sortedIdx.isEmpty() &amp;&amp; nums[sortedIdx.peekLast()] &lt; nums[i]) {<br>                sortedIdx.removeLast();<br>            }<br>            sortedIdx.addLast(i);<br>            if (i &gt;= k) {<br>                while (sortedIdx.peekFirst() &lt;= i - k) {<br>                    sortedIdx.removeFirst();<br>                }<br>            }<br>            if (i &gt;= k - 1) {<br>                result[i - k + 1] = nums[sortedIdx.peekFirst()];<br>            }<br>        }<br>        return result;<br>    }<br>}</code></pre><p><br></p><ul>\n</ul>"

const innerHTML17 = "<h1 id=\"python-flask-tutorial-basics-notes\">Python Flask Tutorial Basics Notes</h1>\n<h2 id=\"learning-resources\">Learning Resources</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=Z1RJmh_OqeA\" target=\"_blank\">Flask Set-up and Basics</a><ul>\n<li>Watch until 16:50. we are not using SQLAlchemy because it writes queries for you, which is forbidden by the course policy. We will find an alternative study resource in the database section. To that end, don't install the <code>flask-sqlalchemy</code> package!</li>\n</ul>\n</li>\n<li><a href=\"https://ampersandacademy.com/tutorials/flask-framework/flask-framework-mysql-connection-using-pymysql\" target=\"_blank\">PyMySQL with Flask</a><ul>\n<li>This is the right thing about MySQL database connecting to Flask we are looking at! <code>pymysql</code> builds the bridge between the MySQL server and your backend server. You will be writing SQL to directly talk to MySQL!</li>\n</ul>\n</li>\n<li><a href=\"https://flask-login.readthedocs.io/en/latest/\" target=\"_blank\">Flask Login Documentation</a><br><ul><li>A very elaborated extension to Flask that handles login and session validation gracefully. We will only use the most basic functions.</li></ul></li></ul>\n<p><span style=\"font-style: italic;\">And as always, Google it if you want to learn anything!</span></p><p><strong>If there are any inconsistencies between the tutorial resources and this notebook, follow this notebook instead because this is closer to what we will do for the project!</strong></p>\n<h2 id=\"preparation\">Preparation</h2>\n<ul>\n<li>Install Python 3.6+ and PIP</li>\n<li>Install virtualenv</li>\n<li>Create our project directory</li>\n<li>Create a virtual environment</li>\n<li>Install the required packages</li>\n</ul>\n<h2 id=\"virtualenv-and-your-first-server-page\">Virtualenv and Your First Server Page</h2>\n<ol>\n<li>Install <code>virtualenv</code> instead of relying on the global packages<ul>\n<li>how: run <code>pip3 install virtualenv</code></li>\n<li>why: to share code/project with other collaborators.</li>\n<li>Note: but you still need to install the package <code>virtualenv</code> <em>globally</em> to enable you to use the virtual environment. Just the other packages will be in this virtual environment.</li>\n</ul>\n</li>\n<li>Create and Activate the virtual environment<ul>\n<li><code>virtualenv env</code> // create</li>\n<li><code>source env/bin/activate</code> // activate</li>\n<li><code>deactivate</code> // exit gracefully if you need to</li>\n</ul>\n</li>\n<li><strong>Inside the virtual environment</strong>, install <code>flask</code><ul>\n<li><code>pip3 install flask</code></li>\n</ul>\n</li>\n<li>Create a file named <code>app.py</code> inside your root directory, and paste in the following code</li>\n</ol>\n<pre><code><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask\n\n\napp = Flask(__name__)\n\n\n<span class=\"hljs-meta\">@app.route('/')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-keyword\">    return</span> <span class=\"hljs-string\">'Hello, World!'</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-keyword\">True</span>)\n</code></pre><ul>\n<li>Start the server and view the page<ul>\n<li>To start the server, run <code>python app.py</code></li>\n<li>You should see something like <code>Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</code>, the actual portal number 5000 may subject to change.</li>\n<li>Go to the browser and type in URL <code>localhost:5000</code></li>\n<li>Now you should see \"Hello World!\" printed on page</li>\n</ul>\n</li>\n</ul>\n<p><em>A website printing Hello World is boring. Let's spice it up!</em></p>\n<h2 id=\"static-contents-and-templates\">Static Contents and Templates</h2>\n<ol>\n<li>Create <code>static</code> and <code>templates</code> folder inside you working directory</li>\n<li>You also need to import the <code>render_template</code> module other than Flask from flask</li>\n<li>Now your index() function can return a template file instead of a string<ul>\n<li>create a file named <code>index.html</code> inside the <code>render_templates</code> folder.</li>\n<li><code>return render_templates('index.html')</code>, // no need to include the directory name, the module knows it.</li>\n</ul>\n</li>\n<li>The final <code>app.py</code> after change looks like this:</li>\n</ol>\n<pre><code><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, render_template\n\n\napp = Flask(__name__)\n\n\n<span class=\"hljs-meta\">@app.route('/')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span><span class=\"hljs-params\">()</span>:</span>\n<span class=\"hljs-keyword\">    return</span> render_template(<span class=\"hljs-string\">'index.html'</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(debug=<span class=\"hljs-keyword\">True</span>)</code></pre><h3 id=\"template-inheritance\">Template Inheritance</h3>\n<ul>\n<li>A way to reduce redundant template code</li>\n<li>See the example of how it is done.</li>\n<li>The <code>{% XXX %}</code> syntax</li></ul><h3 id=\"static-contents\">Static Contents</h3><ol>\n<li>Inside the <code>static</code> folder, create <code>css/main.css</code></li>\n<li>To link <code>main.css</code> to <code>index.html</code>, don't forget to import <code>url_for</code> module<ul>\n<li>the <code>{{ function() }}</code> is the template string library in flask, just like <code>${}</code> to JavaScript!</li>\n<li>Link HTML with CSS using the way defined below, don't hardcode the path because that won't work!</li></ul></li></ol>\n<p><strong><em>The aforesaid thing about templates is purely for learning purposes. In our implementation, we rarely let the backend handle page rendering logic. We strictly endorse the rule to have the frontend do so, and only the necessary data will transfer between the frontend and backend through APIs/routes.</em></strong></p>\n<p><strong><em>However, we may use them to create routes to retrieve frontend resources. Since the frontend project structure needs to change to accommodate this Flask project convention, we might be forced to use some of the template formattings, but they should not be too painful.</em></strong></p>\n<h2 id=\"the-database-flask-pymysql-mysql\">The Database: Flask &lt;-&gt; PyMySQL &lt;-&gt; MySQL</h2>\n<p><em>The PyMySQL is called a connector, because it connects your backend (Flask) and the database (MySQL).</em></p>\n<ol>\n<li>Install the database connector package<ul>\n<li>Inside the virtual environment, run <code>pip3 install pymysql</code></li>\n</ul>\n</li>\n<li>Import the module<ul>\n<li><code>import pymysql.cursors</code></li>\n</ul>\n</li>\n<li>Create a connection<ul>\n<li>NOTE: change all capitalized fields<ul>\n<li><code>user</code> is your MySQL username, most people have <code>root</code></li>\n<li><code>password</code> is something you should know as long as you can connect to MySQL through the command line.</li>\n<li><code>db</code> is the database your application backend interacts with.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>connection = pymysql.connect(host=<span class=\"hljs-string\">'localhost'</span>,\n                             user=<span class=\"hljs-string\">'USERNAME'</span>,\n                             password=<span class=\"hljs-string\">'PASSWORD'</span>,\n                             db=<span class=\"hljs-string\">'DATABASE_NAME'</span>,\n                             charset=<span class=\"hljs-string\">'utf8mb4'</span>,\n                             cursorclass=pymysql<span class=\"hljs-selector-class\">.cursors</span><span class=\"hljs-selector-class\">.DictCursor</span>)\n</code></pre><ul>\n<li>Make a simple database operation route (backend service/callable API)<ul>\n<li>Make sure you have <code>gt_food_truck</code> database set up on your machine, and MySQL server is running!</li>\n<li>This example retrieves the <code>username</code>, <code>password</code>, <code>firstName</code> and <code>lastName</code> fields from the HTTP request to complete registration for a user, and place holders are used for other fields.</li>\n<li>At this point, we will hardcode a record to insert into the <code>user</code> table.</li>\n<li>The basic syntax looks like below.</li>\n</ul>\n</li>\n</ul>\n<pre><code><span class=\"hljs-symbol\">try:</span>\n<span class=\"hljs-symbol\">    with connection.cursor() as cursor:</span>\n        sql = 'INSERT INTO `user` (`username`, `password`, `first_name`, `last_name`) ' \\\n              + 'VALUES (<span class=\"hljs-variable\">%s, %</span>s, <span class=\"hljs-variable\">%s, %</span>s)<span class=\"hljs-comment\">;'</span>\n        cursor.execute(sql, (username, password, firstName, lastName))\n        connection.commit()\n    // code logic after sql\n<span class=\"hljs-symbol\">except Exception as e:</span>\n    // code logic to handle MySQL error\n    // for debugging, just\n    print(e)\n</code></pre><ul>\n<li>To retrieve (SELECT) something. Use the following syntax:</li>\n</ul>\n<pre><code><span class=\"hljs-keyword\">try</span>:\n    with connection.<span class=\"hljs-built_in\">cursor</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">cursor</span>:\n        sql = <span class=\"hljs-string\">'SELECT * FROM `user`;'</span>\n<span class=\"hljs-built_in\">        cursor</span>.<span class=\"hljs-keyword\">execute</span>(sql)\n        data = <span class=\"hljs-built_in\">cursor</span>.fetchall()\n    // code logic after sql\nexcept Exception <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">e</span>:\n    // code logic <span class=\"hljs-keyword\">to</span> handle MySQL error\n</code></pre><p><strong>Since we are doing an update (INSERT), we need to commit our changes to the database with <code>connection.commit()</code>. However, if we are only doing pure retrieval, we don't have to commit as you see in the last example.</strong></p>\n<h3 id=\"obtaining-get-data\">Obtaining GET data</h3>\n<ul>\n<li>Data sent by GET are encoded in the URL. They are key-value pairs appended after a route.</li>\n<li>The frontend may send a GET request in the form of URL like this<ul>\n<li><code>http://www.gtfoodtruck.com/get-user-list?username=dingfei&amp;firstName=Phillip</code></li>\n</ul>\n</li>\n<li>As you can see, the pairs start with <code>?</code> and are separated using <code>&amp;</code></li>\n<li>The backend may get them by<ul>\n<li><code>request.args.get('username')</code></li>\n<li><code>request.args.get('firstName')</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"obtaining-post-data\">Obtaining POST data</h3>\n<ul>\n<li>Data sent by POST are invisible to common users. They are considered a more secure way to transfer data because the data are included in the request body, not visible in the URL.</li>\n<li>You can't just send a POST request by hand, but JavaScript has abundant libraries to help you do so as a frontend developer.</li><li>You can also download&nbsp;<a href=\"https://www.postman.com/\" target=\"_blank\">Postman</a>&nbsp;to test POST, an excellent tool for testing backend APIs!</li>\n<li>In our example, we will strictly send JSON data between the frontend and the backend. To retrieve them using Flask:</li>\n</ul>\n<pre><code><span class=\"hljs-attr\">data</span> = request.get_json()\n<span class=\"hljs-attr\">username</span> = data[<span class=\"hljs-string\">'username'</span>]\n<span class=\"hljs-attr\">password</span> = data[<span class=\"hljs-string\">'password'</span>]\n<span class=\"hljs-attr\">firstName</span> = data[<span class=\"hljs-string\">'firstName'</span>]\n<span class=\"hljs-attr\">lastName</span> = data[<span class=\"hljs-string\">'lastName'</span>]\n</code></pre><h2 id=\"write-a-response\">Write a Response</h2>\n<ul>\n<li>Again, we will use JSON!</li>\n<li>This is the <code>return</code> statement in each Flask app route.</li>\n<li><code>from flask import jsonify</code></li>\n</ul>\n<pre><code><span class=\"hljs-keyword\">return</span> jsonify({\n<span class=\"hljs-string\">    'key1'</span>: val1\n<span class=\"hljs-string\">    'key2'</span>: val2\n    ...\n})\n</code></pre><h2 id=\"conclusion\">Enabling Cross-Origin Resource Sharing (CORS)<br></h2><ul><li><code>pip3 install flask_cors</code></li><li><code>from flask_cors import CORS</code></li><li><code>CORS(app)</code></li></ul><h2 id=\"conclusion\">Sessions, Cookies, Logging In, and Validation</h2><ul><li>Look at the&nbsp;<a href=\"https://flask-login.readthedocs.io/en/latest/\" target=\"_blank\">Flask Login Documentation</a>&nbsp;and the demo example at the end. Pay special attention to the following.</li><li>Configuring Your Application</li><li>How It Works</li><li>Your User Class</li><li>Login Example</li><li>Protecting Views (close to the bottom)</li></ul><h2 id=\"conclusion\">Conclusion</h2>\n<p>See a full demo example bellow.</p><p><a href=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/flask-notes/flask_example.zip\" target=\"_blank\">Demo Example on GitHub</a><br></p>"

const innerHTML10 = "<p></p><h1>Introduction</h1><p><span style=\"font-size: large;\">Space Trader is a game where player is allowed to travel around different regions in the universe and purchase and sell items in markets so that it is possible to make money in the game. The player will also encounter different types of NPC during travel and be able to interact with them in many ways.<br><br>This is a game project relating to a course I took at college. My team and I developed this game under the guidance of the course instructor, and the development involves completing timeboxed milestones. Since it is a course project, the technology we used was quite outdated: Java Swing. The game demoed here is the final deliverable version we created for the course.</span><br></p><p><span style=\"font-size: large;\"><br></span></p><p style=\"text-align: center;\"><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/space-trader-game/space-trader.jpg?raw=true\" style=\"max-width:100%;\"><span style=\"font-size: large;\"><br></span></p><br><h1>How to Play</h1><p><span style=\"font-size: large;\">You can play this game in two ways. One is to use the link below to access an online platform called Java Swing REPL, which is browser-based Java Swing, as cool as it sounds because it enables you to play the game in the browser without worrying about installing JRE and dependency libraries. However, there are two problems with this solution. First, it is very slow in terms of both loading the game (30 sec - 1 min) and getting a response after clicking on a button or something. Second, it is ugly. Our team was putting a tremendous amount of effort into creating beautiful layouts and outlooks, but it only worked with Mac OS. The Mac look-and-feel is propriety of Apple Inc., so on Windows and Linux a lot of graphical elements are not shown as we intended. Since most members in our team are Mac users and we did not care too much about GUI-related issues, we did not resolve this flaw in the final milestone deliverable.</span><br></p><p><span style=\"font-size: large;\"><br></span></p><p style=\"text-align: center;\"><a href=\"https://repl.it/@FeiDing/space-trader\" target=\"_blank\" style=\"font-size: large;\">Java Swing REPL</a><span style=\"font-size: large;\"><br></span></p><div style=\"text-align: center;\"><br></div>\n\n<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><th><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/space-trader-game/windows-game.png?raw=true\" style=\"max-width:100%; width: 400px;\">&nbsp;<br>Linux / Windows</th><th><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/space-trader-game/mac-game.png?raw=true\" style=\"max-width:100%; width: 400px;\">&nbsp;<br>MacOS</th></tr></tbody></table><br><p style=\"text-align: left;\"><span style=\"font-size: large;\">Also, here is an embedded version to try.</span></p><p><iframe height=\"900px\" width=\"100%\" src=\"https://repl.it/@FeiDing/space-trader?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe></p><p><br></p><p><br></p><p><span style=\"font-size: large;\">However, if you are a patient player with Mac OS and you happen to have JRE (Java Runtime Environment) installed in your system, you can try another way of playing this game. Simply download the .jar package listed below and launch with an easy click*. This will definitely bring the maximized experience for you.</span></p><p><span style=\"font-size: large;\"><br></span></p><p style=\"text-align: center;\"><a href=\"https://github.com/PhillipFeiDing/space-trader/raw/master/out/artifacts/M3Group66Latest_jar/SpaceTrader.jar\" style=\"font-size: large;\" download=\"\">SpaceTrader.jar</a><br></p><p><span style=\"font-size: large;\"><br>*: You may have to modify your security settings for the first time. Right-click on the .jar icon and choose to open with JAR launcher. The system will guide you to do the necessary settings.</span></p><p><span style=\"font-size: large;\"><br></span></p><h1>Final Note</h1><p><span style=\"font-size: large;\">Another note, the Load and Save game button in the game are disabled, and honestly, our team did not bother implementing them because they are not requirements from our milestones but purely our conjectures. I am considering implementing them with JSON files in the future if necessary.</span><br></p><p></p><br><h1 style=\"text-align: left;\">Repository Link</h1><p style=\"text-align: center;\"><a href=\"https://github.com/PhillipFeiDing/space-trader\" target=\"_blank\" style=\"font-size: large;\">Link to GitHub</a></p><p></p>"

const innerHTML15 = "<p style=\"text-align: center;\"><iframe src=\"https://phillipfeiding.github.io/english-portfolio/\" scrolling=\"yes\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" id=\"idIframe\" width=\"870px;\" height=\"550px;\"></iframe><br></p><h1>About</h1><p><span style=\"font-size: large;\">This is the final portfolio project I accomplished during the first year at Tech when taking course ENGL 1102. The original portfolio was on GT Canvas but I decided to transplant it here as well.</span></p><p style=\"text-align: center;\"><br></p>"

const innerHTML11 = "<h1><span style=\"font-weight: bold;\"></span>Introduction</h1><p><span style=\"font-size: large;\">In computer science and information theory, a Huffman code is a particular type of optimal prefix code that is commonly used for lossless data compression. The process of finding or using such a code proceeds by means of Huffman coding, an algorithm developed by David A. Huffman while he was a Sc.D. student at MIT, and published in the 1952 paper \"A Method for the Construction of Minimum-Redundancy Codes\". This project provides an implementation of the classical Huffman encoding algorithms, a browser-based (JavaScript) demo interface, and a desktop (Java) utility tool available for download!</span></p><p><span style=\"font-size: large;\"><br></span></p><h1><span style=\"font-weight: normal;\"></span>The Algorithm<br></h1><p><span style=\"font-size: large;\">&nbsp;We already know that every character is stored in sequences\nof 0's and 1's using 8 bits. This is called <span style=\"font-weight: bold; color: rgb(194, 79, 74);\">fixed-length encoding</span> as each\ncharacter uses the same number of fixed bits storage.</span></p><p class=\"MsoNormal\"><span style=\"font-size: large;\"><o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: x-large; font-weight: bold;\">Given a text, how can we reduce the amount of space required\nto store a character?</span><o:p></o:p></p>\n\n<p class=\"MsoNormal\"><o:p>&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">The idea is to use <span style=\"color: rgb(194, 79, 74); font-weight: bold;\">variable-length encoding</span>. We can exploit\nthe fact that some characters occur more frequently than others in a text to\ndesign an algorithm that can represent the same piece of text using lesser\nnumber of bits. In variable-length encoding, we assign variable number of bits\nto characters depending upon their frequency in the given text. So, some\ncharacters might end up taking 1 bit, some might end up taking two bits, some\nwill be encoded using three bits, and so on. The problem with variable-length\nencoding lies in its decoding.</span><o:p></o:p></p>\n\n<p class=\"MsoNormal\"><o:p>&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: x-large; font-weight: bold;\">Given a sequence of bits, how can we decode it uniquely?</span><o:p></o:p></p>\n\n<p class=\"MsoNormal\"><o:p>&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">Let's consider the string \"aabacdab\". It has 8\ncharacters in it and uses 64 bits storage (using fixed-length encoding). If we\nnote, the frequency of characters 'a', 'b', 'c', and 'd' are 4, 2, 1, 1\nrespectively. Let's try to represent \"aabacdab\" using lesser number\nof bits by the fact that 'a' occurs more frequently than 'b' and 'b'\noccurs more frequently than 'b' and 'b' occurs more frequently than 'c' and\n'd'. We start by randomly assigning single bit code 0 to 'a', 2-bit code 11 'b'\nand 3-bit code 100 and 011 to characters 'c' and 'd' respectively. </span><o:p></o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; <o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; a 0<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; b 11<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; c 100<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; d 011<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">So the string aabacdab will be encoded to 00110100011011\n(0|0|11|0|100|011|0|11) using the above code. But the real problem lies in\ndecoding. If we try to decode the string 00110100011011, it will lead to\nambiguity as it can be decoded to,<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; 0|011|0|100|011|0|11\nadacdab<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp;\n0|0|11|0|100|0|11|011 aabacabd<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp;\n0|011|0|100|0|11|0|11 abacabab<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; ...<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; and so on<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">To prevent ambiguities in decoding, we will ensure that our\nencoding satisfies what's called the prefix rule which will result in uniquely decodable codes. The prefix rule states that no code is a prefix of\nanother code. By code, we mean the bits used for a particular character. In the above example, 0 is a prefix of 011 which violates the prefix rule. So if our\ncodes satisfy the prefix rule, the decoding will be unambiguous (and vice\nversa).<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">Let's consider the above example again. This time we assign codes\nthat satisfies the prefix rule to characters 'a', 'b', 'c', and 'd'.<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; a 0<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; b 10<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; c 110<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">&nbsp;&nbsp;&nbsp; d 111<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">Using the above codes, the string aabacdab will be encoded to\n00100100011010 (0|0|10|0|100|011|0|10). Now we can uniquely decode\n00100100011010 back to our original string \"aabacdab\".<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: x-large; font-weight: bold;\">Huffman Coding</span><o:p></o:p></p>\n\n<p class=\"MsoNormal\"><o:p>&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">Now that we are clear on variable-length encoding and prefix\nrule, let's talk about Huffman coding.<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">The technique works by creating a binary tree of nodes. A\nnode can be either a leaf node or an internal node. Initially, all nodes are\nleaf nodes, which contain the character itself, the weight (frequency of\nappearance) of the character. Internal nodes contain character weight and links\nto two child nodes. As a common convention, bit '0' represents following the\nleft child and bit '1' represents following the right child. A finished tree has\nn leaf nodes and n-1 internal nodes. It is recommended that the Huffman tree should\ndiscard unused characters in the text to produce the most optimal code lengths.<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">We will use a priority queue for building the Huffman tree where\nthe node with the lowest frequency is given the highest priority. Below are the\ncomplete steps -<o:p></o:p></span></p><p class=\"MsoNormal\"><span style=\"font-size: large;\"><br></span></p>\n\n<pre><code>1. Create a leaf node for each character and add them to the priority queue.<br><br>2. While there is more than one node in the queue:<br><br>    a. Remove the two nodes of highest priority (lowest frequency) from the queue<br><br>    b. Create a new internal node with these two nodes as children and with frequency equal to the sum of the two nodes' frequencies.<br><br>    c. Add the new node to the priority queue.<br><br>3. The remaining node is the root node and the tree is complete.</code></pre><p><br></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">Consider some text consisting of only 'A', 'B', 'C', 'D' and\n'E' character and their frequencies are 15, 7, 6, 6, 5 respectively. Below figures\nillustrate the steps followed by the algorithm -<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\"><br></o:p></p><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><th style=\"text-align: left;\"><span style=\"font-size: x-large;\">Building a Huffman Tree</span></th></tr><tr><td style=\"text-align: left;\">&nbsp;<img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/huffman-coding/Huffman-Coding-1.png?raw=true\" style=\"max-width:100%;\"></td></tr><tr><td style=\"text-align: left;\">&nbsp;<img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/huffman-coding/Huffman-Coding-2.png?raw=true\" style=\"max-width:100%;\"></td></tr><tr><td style=\"text-align: left;\">&nbsp;<img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/huffman-coding/Huffman-Coding-3.png?raw=true\" style=\"max-width:100%;\"></td></tr><tr><td style=\"text-align: left;\">&nbsp;<img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/huffman-coding/Huffman-Coding-4.png?raw=true\" style=\"max-width:100%;\"></td></tr><tr><td style=\"text-align: left;\">&nbsp;<img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/huffman-coding/Huffman-Coding-5.png?raw=true\" style=\"max-width:100%;\"></td></tr></tbody></table><p class=\"MsoNormal\"><o:p style=\"font-size: large;\"></o:p></p><p><br></p><p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p>\n\n<p class=\"MsoNormal\"><span style=\"font-size: large;\">The path from the root to any leaf node stores the optimal\nprefix code (also called Huffman code) corresponding to the character associated\nwith that leaf node.<o:p></o:p></span></p>\n\n<p class=\"MsoNormal\"><o:p style=\"font-size: large;\">&nbsp;</o:p></p><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><th><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/huffman-coding/Huffman-Coding-6.png?raw=true\" style=\"max-width:100%;\">&nbsp;</th></tr><tr><td>&nbsp;<span style=\"font-size: x-large;\">Completed Huffman Tree</span></td></tr></tbody></table><br><h1>Simulation</h1><p class=\"MsoNormal\"><span style=\"font-size: large;\">Below you can run both algorithms written in JavaScript.</span></p><iframe height=\"1200px\" width=\"100%\" src=\"https://phillipfeiding.github.io/huffman-coding/index.html\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe><p><br></p><h1>Desktop Tool</h1><p><span style=\"font-size: large;\">Below is a JavaFX application that actually \"compresses\" and \"decompresses\" the files using binary encoding. <span style=\"font-weight: bold;\">Check that out by examining the file size.</span> You can download the .jar and try if you are interested.</span></p><p style=\"text-align: center;\"><a href=\"https://github.com/PhillipFeiDing/huffman-coding/raw/master/Huffman2.0/out/artifacts/Huffman2_0_jar/Huffman2.0.jar\" style=\"font-size: large;\" download=\"\">Huffman2.0.jar</a><br></p><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><th><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/huffman-coding/encoder.png?raw=true\" style=\"max-width:100%;\"></th><th><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/huffman-coding/decoder.png?raw=true\" style=\"max-width:100%;\"></th></tr><tr><td style=\"text-align: center; \">&nbsp;<span style=\"font-weight: bold; font-size: large;\">Huffman Encoder Interface</span></td><td style=\"text-align: center; \">&nbsp;<span style=\"font-weight: bold; font-size: large;\">Huffman Decoder Interface</span></td></tr></tbody></table><p><br></p><h1>Repository Link</h1><p style=\"text-align: center; \"><a href=\"https://github.com/PhillipFeiDing/huffman-coding\" target=\"_blank\" style=\"font-size: large;\">Link to GitHub</a><br></p>"

const innerHTML9 = "<p><span style=\"font-size: large;\">Come in and try this browser-based sudoku game written in JavaScript. Compete with your friends and see who solves faster! There are over 150 levels marked with three different difficulty levels A through C, from the easiest to the impossible. Can you solve all of them? You can drag and drop numbers into the cells or type in using the click-enabled tiny keyboard. Notice you also get a limited number of cues if you get stucked. Feel free to pause at any time you want and come back again to solve these puzzles. Does the timer on the left make you stressed? Enjoy.</span></p><p><span style=\"font-size: large;\"><br></span></p><p><iframe height=\"720px\" width=\"100%\" src=\"https://phillipfeiding.github.io/sudoku/WebContent/sudoku.html\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe><br></p><h1 style=\"text-align: left;\">Repository Link</h1><p style=\"text-align: center;\"><a href=\"https://github.com/PhillipFeiDing/sudoku\" target=\"_blank\" style=\"font-size: large;\">Link to GitHub</a><br></p>"

const innerHTML4 = "<p style=\"text-align: center; \"><img src=\"https://raw.githubusercontent.com/PhillipFeiDing/myblog-resource/master/maze-generator-solver/maze-new.gif\" style=\"max-width:100%;\"><br></p><h1>Background</h1><p><span style=\"font-size: large;\">Recently I became obsessed with how mazes, which you can usually find at the back of a magazine, are automatically generated. At first, I think they must have been produced by extremely advanced algorithms that few people can understand. However, it was only through the process of solving an actual maze, which extensively applies various classical search algorithms, that I suspect the same procedure in a reverse manner might be effective in generating one. Luckily, by coding an actual prototype, it turns out that my program can answer both questions for me. By randomly combining DFS (Depth First Search) and BFS (Breadth First Search) backed by a deque*, I am able to create my own challenging maze and then solve it with the help of this simulation tool.</span></p><div><span style=\"font-size: large;\"><br>* deque, a data structure that supports both adding and removing from both the head and the tail upon your choice. More general than stack (LIFO) and queue (FIFO).</span></div><p><br></p><p style=\"text-align: center;\"><img src=\"https://github.com/PhillipFeiDing/myblog-resource/raw/master/maze-generator-solver/deque.png\"><br></p><p style=\"text-align: center;\"><br></p><div><h1>How I Made It</h1></div><p><span style=\"font-size: large;\">This simulation is powered by Java Swing, a very old (outdated) yet mature GUI framework popular in the early 2000s. The project is public on GitHub as a repository and spans as an IntelliJ project, so opening this in IntelliJ will allow you to run it and directly change some maze parameters in the main class (AlgoVisualizer). See details at the bottom.<br><br>Below you will see a video demo of this simulation project.</span></p><p style=\"text-align: center;\"><br></p><p style=\"text-align: center;\"><iframe width=\"840\" src=\"https://www.youtube.com/embed/_rair44FJCQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" height:=\"\" height=\"472\"></iframe></p><p><br></p><p><br></p><h2>Maze Generator</h2><p><span style=\"font-size: large;\">The generator is a bit more complicated than the solver which clearly applies some search algorithm. To make search algorithms work on the maze generating task we need to do a little modification: instead of directly producing a maze, we first manually make a grid of walls where each cell is disconnected from others. Then, we choose a starting cell and randomly decide which wall to break. After that, we take the connected adjacent cell into consideration and continue the process of breaking walls. If we conceive each breakable wall as a valid element in our collection, of which the current ones we are considering to break are in our open list (here a deque). Removing a piece of wall means opening a new cell and will bring two or three more breakable walls to consider, which will be added randomly to either the head or the tail of the deque. Do this until we open up the entire maze. One thing to notice here is that we need to break walls in a manner that we produce no cycle in the maze, so we will also keep track of visited cells using a set. Bingo, now we have a maze generating process backed by a customized search algorithm.</span></p><p><br></p><p style=\"text-align: center;\"><img src=\"https://github.com/PhillipFeiDing/myblog-resource/raw/master/maze-generator-solver/grid.png\"><span style=\"color: rgb(255, 255, 255);\">--------------------</span><img src=\"https://github.com/PhillipFeiDing/myblog-resource/raw/master/maze-generator-solver/breakable_walls.png\"><br></p><p><br></p><h2>Maze Solver</h2><p><span style=\"font-size: large;\">The maze solver is much simpler, and a simple DFS will suffice. DFS is particularly useful in this case because backtracking a path is very easy and natural with a stack.</span></p><p><br></p><p style=\"text-align: center;\"><img src=\"https://github.com/PhillipFeiDing/myblog-resource/raw/master/maze-generator-solver/maze_solved.png\" style=\"max-width:100%; width: 500px;\"><span style=\"color: rgb(255, 255, 255);\">-----</span><img src=\"https://github.com/PhillipFeiDing/myblog-resource/raw/master/maze-generator-solver/backtracking.png\" style=\"max-width: 100%; width: 500px;\"><br></p><p><br></p><div><h1>Final Words</h1></div><p><span style=\"font-size: large;\">I believe this interesting maze generator/solver is the first step toward artificial intelligence. In fact, people all agree that search algorithms are actually the earliest AI approaches used in the industry. Despite being simple to implement, they have various applications in spacial navigation, route planning, and puzzle solving. On the other hand, they have certainly invited and inspired the appearance of other more advanced AI algorithms.</span><br></p><p><br></p><p style=\"text-align: center;\"><img src=\"https://github.com/PhillipFeiDing/myblog-resource/raw/master/maze-generator-solver/navigation.jpg\" style=\"max-width:100%; width: 300px;\"><span style=\"color: rgb(255, 255, 255);\">----------</span><img src=\"https://github.com/PhillipFeiDing/myblog-resource/raw/master/maze-generator-solver/robot.jpeg\" style=\"max-width: 100%; width: 300px;\"><span style=\"color: rgb(255, 255, 255);\">----------</span><img src=\"https://github.com/PhillipFeiDing/myblog-resource/raw/master/maze-generator-solver/chess.jpg\" style=\"max-width: 100%; width: 300px;\"><br></p><p style=\"text-align: center;\"><br></p><div><h1>Repository Link</h1><p style=\"text-align: center;\"><a href=\"https://github.com/PhillipFeiDing/java-swing-demos/tree/master/RandomMazeGenerator%20%2B%20Solver\" target=\"_blank\" style=\"font-size: large;\">Link to GitHub</a><br></p></div>"

const innerHTML7 = "<p></p><h1 style=\"text-align: center;\"><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/computational-physics-model/balls.gif?raw=true\" style=\"max-width:100%; width: 800px; margin-bottom: 60px; border-radius: 40px;\"><br></h1><h1>Background</h1><p><span style=\"font-size: large;\">As a progressive learner trying to master the Java language, I taught myself some GUI programming under the Swing framework, just to discover their usefulness in building and visualizing real world models. More precisely, I could make computational physics models by writing very simple and self-explanatory codes. Though more advanced commercial simulation tools might do a better job in both representing and rendering such models, coding them on my own has certainly enriched my knowledge of GUI programming, and hopefully, has helped me review some physics …, but most importantly, they are fun and interesting.</span><br></p><br><h1>How I Made It</h1><p><span style=\"font-size: large;\">First, I needed to construct a model, and before that I’d better be clear with what I would like to simulate. The simplest yet dynamic model I could come up with consists a collection of circles (assuming a 2D environment) in motion colliding with each other. Even such a simple model could pose challenges for a beginner programmer. There are two main problems to solve.</span><br></p><p></p><ul><li><p><span style=\"font-size: large;\">How to encode each object’s position and velocity (state) in the 2D space?</span></p></li><li><p><span style=\"font-size: large;\">How to calculate the effect of collision?&nbsp;</span></p></li></ul><p><span style=\"font-size: large;\">To solve the first problem, I resolved to principles of object-oriented programming. OOP provides a wonderful model for encapsulation, with which we can easily define the attributes of each circle objects, including its center coordinates, velocity, and radius in an organized manner. These attributes have been proven adequate in representing the motion state of a circle.<br>The second one is trickier, assuming that you only had a minimal mastery of high school physics education like I did. Luckily, there were numerous tutoring materials on the internet for me to consult with, though I would never be expected to solve 2-D collision problems on an actual physics exam. The formula looks daunting really, yet computers are not feared as they are data-crunching monsters!</span></p><p><span style=\"font-size: large;\"><br></span></p><table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><th><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/computational-physics-model/collision.png?raw=true\" style=\"max-width:100%; width: 400px;\">&nbsp;</th><th><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/computational-physics-model/formula.png?raw=true\" style=\"max-width:100%; width: 635px;\">&nbsp;</th></tr></tbody></table><p><span style=\"font-size: large;\"><br>Now that I had a functioning conceptual model, it’s time to implement in the software. With a pre-written framework like Swing, I spent little time struggling with low-level issues like getting the window frame to set up and could focus on the main simulation and rendering logic. In fact, the latter two came naturally with a simple giant loop. In each iteration, I could let each circle in the model move just a little bit, when they had time for travelling a fraction of second or experiencing an instantaneous collision with another circle. Afterwards, they would be ready to show on the screen. Again, the Swing framework came with mature and reliable rendering APIs to use even with the most primitive painting tasks.</span></p><p><br></p><h1>And More</h1><p><span style=\"font-size: large;\">What would happen if we make a large number of such circles with this simulation? One thing for sure is that it will slow down my computer because the time needed for computing one frame for the model is proportional to the number of objects in the simulation. But what are the more interesting aspects lying behind this? Let’s find out.</span></p><p><span style=\"font-size: large;\"><br></span></p><div style=\"text-align: center;\"><iframe width=\"840\" height=\"472\" src=\"https://www.youtube.com/embed/ijimI3QST1I\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></div><div style=\"text-align: center;\"><br></div><div style=\"text-align: left;\"><br></div><p></p><p><span style=\"font-size: large;\">Above you can see over 500 tiny blue particles along with over 500 red particles, with each group initially occupying one side. As time elapses, you can see them fuse into each other. Surprisingly, this model truthfully simulates the dispersion phenomenon of ideal gases, though with a prohibitively expensive computational cost.</span></p><p><br><span style=\"font-size: large;\">How about gravity? Sure, why not making a solar system? Watch carefully: the simulation gets quite funny at the end.</span></p><p><span style=\"font-size: large;\"><br></span></p><p style=\"text-align: center;\"><iframe width=\"840\" height=\"472\" src=\"https://www.youtube.com/embed/7d1Xd2NBxG8\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><p><br></p><h1>Repository Link</h1><p></p><p style=\"text-align: center;\"><span style=\"font-size: large;\"><a href=\"https://github.com/PhillipFeiDing/java-swing-demos/tree/master/BallCollision\" target=\"_blank\">Circles</a><br></span></p><p style=\"text-align: center;\"><a href=\"https://github.com/PhillipFeiDing/java-swing-demos/tree/master/PlanetaryModel\" target=\"_blank\" style=\"font-size: large;\">Solar System</a><br></p>\n"

const innerHTML8 = "<h1>Background</h1><p><span style=\"font-size: large;\">Continuing on the physics model I made last time, I decided to create an economics simulation this time, inspired by a real-time experiment I read about on a magazine. Here it goes.<br><br></span></p><blockquote><span style=\"font-size: large; font-style: italic;\">In a closed room there are exactly 100 people, and each person has exactly 100 dollars initially. In every minute everyone has to pick a random person among the 100 and give him/her 1 dollar. Therefore, after each minute, one could possibly gain some dollars from others, remain unchanged in wealth, or lose at most 1 dollar (in the case he/she gives out 1 dollar but received none).</span></blockquote><p><br></p><p><span style=\"font-size: large;\">By common sense, everyone in the room has equal chance to gain or lose, so even after 1,000,000,000 rounds they should possess roughly equal amount of money. Is that true? Run the&nbsp;following simulation to verify!<br></span></p><p></p><p><span style=\"font-size: large;\"><br></span></p><p style=\"text-align: center; \"><iframe width=\"840\" height=\"472\" src=\"https://www.youtube.com/embed/B2KjgDsT3qI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><p><br></p><p><span style=\"font-size: large;\"><br>A blue bar indicates that person still has money, while a red bar means that person is in debt. Bars are sorted in a way to help you visualize what is happening.</span><br><br></p><h1>Thoughts</h1><p><span style=\"font-size: large;\">Life is like this simulation, but without a “reset” button. The same trend persists as we run the simulation several times, so it can be generalized. Can you now feel a sense of enmity from some profound principles in life?<br></span><br></p><h1>Theory Behind: Probability Theory and Statistics</h1><p><span style=\"font-size: large;\">So what makes this counterintuitive effect? It all has to do with probability theory, which in application turns into statistical methods. The above example shows how data can diverge in the long run for some special cases. However, the real power of probability theory lies in its converging nature. Here are a few examples.</span><br><br><span style=\"font-size: large;\">First, let’s view a famous experiment with Pi. In calculus, we know there are fast converging Tylor Series for calculating the number efficiently. However, statisticians take a very different approach: by doing a real experiment to approximate.</span><br><br></p><div style=\"text-align: center;\"><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/computational-statistics-model/monteCarloPi.gif?raw=true\" style=\"max-width: 100%;\"></div><br><span style=\"font-size: large;\">The method is named after&nbsp;<a href=\"https://en.wikipedia.org/wiki/Monte_Carlo_method\" target=\"_blank\">Monte Carlo</a>, which has various applications in other fields as well.<br><br>Another example I bring involves a fundamental principle in probability theory, the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Central_limit_theorem\" target=\"_blank\">Central Limit Theorem (CLT)</a>, which I bring to a live simulation. Watch how the distribution is normalized as n goes from 1 to 30.</span><p></p><p><span style=\"font-size: large;\"><br></span></p><p style=\"text-align: center;\"><img src=\"https://github.com/PhillipFeiDing/myblog-resource/blob/master/computational-statistics-model/clt.gif?raw=true\" style=\"max-width:100%; border: 2px solid #999999\"><span style=\"font-size: large;\"><br></span></p><p><span style=\"font-size: large;\"><br></span></p><h1>Repository Link</h1><p style=\"text-align: center;\"><a href=\"https://github.com/PhillipFeiDing/java-swing-demos/tree/master/MoneyExchange\" target=\"_blank\" style=\"font-size: large;\">Money Exchange</a></p><p style=\"text-align: center;\"><span style=\"font-size: large;\"><a href=\"https://github.com/PhillipFeiDing/java-swing-demos/tree/master/PiWithMonteCarlo\" target=\"_blank\">Monte Carlo PI</a><br></span></p><p style=\"text-align: center;\"><a href=\"https://github.com/PhillipFeiDing/java-swing-demos/tree/master/NormalDistribution\" target=\"_blank\" style=\"font-size: large;\">Central Limit Theorem</a><br></p><p></p>"

class Detail extends Component {
    
    render() {
        const { showBackground } = this.props
        return (
            <MainWrapper>
                <HeaderWrapper id='header-wrapper'>
                    <TitleDisplay>RM ICRA Robot Base Detection</TitleDisplay>
                    <br />
                    <TimeDisplay>Friday, May 8, 2020 11:57 AM</TimeDisplay>
                </HeaderWrapper>
                <ContainerWrapper id='container-wrapper'>
                    <ParticlesContainer show={showBackground}/>
                    <Container className='main-content'>
                        <Content id='detail-content' dangerouslySetInnerHTML={{__html: innerHTML8}}></Content>
                    </Container>
                </ContainerWrapper>
            </MainWrapper>
        )
    }
}

const mapStateToProps = (state) => ({
    showBackground: state.getIn(['app', 'showBackground'])
})

export default connect(mapStateToProps, null)(Detail)